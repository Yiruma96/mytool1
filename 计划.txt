7.7-7.12 今天：把那段话写完，然后整理为可以发送的格式，计划最晚明天上午发送出去
明天上午：看看能不能把中文的大概整理完，然后翻译放到平时，大概就是下周工作日把background的中文+翻译搞完
7.13-19 下周末开始把第一段修改为IOT格式的，这三段话可能要一些时间，也许要下个周末才能完成。如果提前做完的话就修改。
7.20-26 下下周工作日开始，将代码修改为支持BBL格式的，因为涉及到代码拷贝所以这部分可能要回去才能完成，有点麻烦，要么还是测试egalito吧，这个工作可以用工位的来完成，但有问题是egalito可能会做的很准确，导致没有问题，个人觉得不太可能，毕竟adrp和add的距离，jump pattern的多样性，还是有挑战存在的。关于对基本块随机化的支持，可以说MLARandom是对跨语言信息收集的支持，未来我们考虑从两方面扩展该工作，一是将其扩展到mips或是risv等架构上去，另一方面是随机化粒度的扩展，虽然函数级随机化在多数情况下已经可以提供足够的熵值保护，但在一些极端情况例如函数数量不够时，可以进一步采用基本块级别随机化。从我们的初步调研来看，汇编代码中包含了对于基本块边界的指示，这可以帮助我们来完成这项任务。
从gas到gold都是要修改的，有点麻烦，并且二进制重写器里要考虑到BBL。而且不知道Rust有没有什么静态的运行时信息。
7.27-8.3 收尾，包括调整指针章节到性能评估中，包括修改design并提供基础描述，以及修改模板。最后发给傅老师，然后准备投稿

其他工作安排：
A. 健康或是遛弯的时候，思考使用共享内存来解决未分配问题的性能劣势在哪里？有几个问题是要回答的：
1. 要不要使用碎片化释放？还是完全使用基于共享内存的二次分配？其实从性能上用碎片化释放最好，只有尽快释放一个region，才能让它重新申请出来256个。如果是完全基于共享内存二次分配的话，就要回答在什么情况下创建新的别名region：
2. 要在什么情况下创建新的别名region？如果太频繁的话就相当于为每个obj都创建了，这会浪费很多region以及shadow memory，如果太大块的话，又会导致一些chunk块被浪费掉，不能起到重新利用的作用。
3. 看起来SPEC CPU 2017的测试集中对内存的压力并不大，有其是小块的chunk，如果我们的方案最终没有太大的收益该如何？
4. 间隔时间内如果不使用碎片化释放的话，会不会导致急剧的内存增长？
5. 如果短时间内有大量的申请，这些chunk会在什么样的情况下被逐渐释放？
6. 阅读那三篇使用别名对抗的悬垂指针的文章，我们的设计和他们有什么区别，就算是inspired by them，也是要有区别分析的，比如性能之类的。

B. 8月份一定是要把公司的反汇编整理完的，评估工作都可以先放后面做。要使用angr？使用angr吧，angr现在看来针对cangjie的签名工作不行，这个可以放到后面再去整理。先分析angr的基础反汇编流程，通过eh进行一次切割，然后函数切割完成之后就不要再动手了。接下来开始解析元数据了，对反汇编的结果进行修正：例如标注出所有的函数，对成员函数添加支持。当正确划分出所有函数后，就可以开始执行基础的反汇编，以及线性扫描。接下来就是两个最难的地方要深入理解了，一是angr是怎样完成参数识别的，看起来现在的策略会导致错误，我们主要做的事情是修复它，然后看看能不能用callee和caller互相纠正；二是angr是怎样完成间接调用识别的。这里面我们也许可以wrapper function来助理函数间接调用的识别，对于间接jmp看起来仓颉是没有的所以就不用麻烦了。

C. 
8..4 开始继续Sanitizer的工作，在九月6号结束工作。一个月的时间，可以用于做评估，以及